"""
    Python运算符
        1.Python运算符
        2.关系运算符和关系表达式
        3.类型转化
"""
# Python运算符
"""
    Python运算符包括算术运算符、关系运算符和逻辑运算符。
    表达式是由数字或字符串和运算符组成的有意义的式子
    名称  运算符     示例
    加      +        >>>3+4
                     7
    减      —        >>>5-3
                     2
    乘      *        >>>2*3
                     6
    除      /        >>>3/2
                     1.5
    整除    //       >>>3/2
                     1
    求余    %        >>>25%3           # 模运算
                     1
    乘方    **       >>>3**3
                     27
                     
    运算顺序：Python算数运算规则与常规运算规则相同
    长度不受限制：可执行数十位甚至数百位数千位的整数运算
    浮点数运算：在Python中，浮点数是带小数点的数字。
        例如：-3.1、2.999和-4.0都是浮点数
    所有适合用于整数的算术运算符都可用于浮点数，包括%（求模）和//（整除）
        浮点数运算示例：
            print(3.8 + -43.2)
            print(12.8 * 4.5)
            print(374.0 / 12.5)
            print(8.8 ** -5.4)
            print(5.6 // 2)
            print(5.6 % 3.2)
        结果：
            -39.400000000000006
            57.6
            29.92
            7.939507629591553e-06
            2.0
            2.3999999999999995
    对于非常大或非常小的浮点数通常用科学计数法表示
    溢出：浮点数存在上限和下限，超出上限或下限将导致溢出错误。Python可能不对溢出错误进行提示。（run time error）
        e.g.
            print(500.0 ** 100000)
        结果：
            Traceback (most recent call last):
            File "D:/啥都有/Study/Python/1.3Python运算符.py", line 51, in <module>
            print(500.0 ** 100000)
            OverflowError: (34, 'Result too large')
    精度有限：在计算机中，数字用二进制表示。（存在舍入误差）
        e.g.
            print（1 - 2 / 3）
        结果：
            0.33333333333333337  （17位小数）
    应优先考虑整数运算，因为它们更精确且不会溢出（Python中）
    
    复数运算：Python提供了内置的复数支持。复数常用于工程和科学计算之中。
    复数是涉及-1的平方根的数字，在Python中，用 1j 表示-1的平方根。
        例如：
            print(1j)
            Print(1j * 1j)
        结果：
            1j
            (-1+0j)
    算数运算符的优先级高于关系运算符。
    关系运算符   关系表达式   描述      优先级
        <           x<y      小于      前四个优先级相等
        >           x>y      大于      但优先级大于==和！=
        <=         x<=y      小于等于
        >=         x>=y      大于等于
        ==         x==y      等于
        !=         x!=y      不等于
    举例：
        print(2 > 1)
        print(1 <= 2)
        print(1 == 2)
        print(1 != 2)
        print(1 + 2 <= 3 > 5 % 2)
    结果：
        True
        True
        False
        True
        True
    基本逻辑运算符
    逻辑运算符   关系表达式       描述                          优先级
        and      x and y     逻辑与，当x为True时，才计算y       and和or优先级相等
        or       x or y      逻辑或，当x为False时，才计算y
        not      not x       逻辑非                            not优先级大于and和or
        ==       x==y        逻辑相等                          ==和！=优先级相等，大于not
        !=       x!=y        逻辑不等
    逻辑运算符的优先级（按从高到低的顺序排列）
    （）  
    ==  
    ！=  
    not 
    and 
    or

"""
# 类型转换
"""
    将整数和字符串转换为浮点数：使用函数float（x）将整数和字符串转换为浮点数。
        例如：
            print(float(3))
            print(float('3.2'))
            print(float('3'))
        结果：
            3.0
            3.2
            3.0
            
    将整数和浮点数转换为字符串：函数str(n)将指定的数字转换为相应的字符串。
        例如：
            a = 85
            b = str(a)
            print(type(b))
        结果：
            <class 'str'>
    隐式类型转换：表达式同时包含整数和浮点数时，Python会自动将整数转换为浮点数。
    浮点数转换为整数：函数int(x)将小数部分删除。
                     函数round(x)标准圆整方式将小数部分.5的数字圆整到最接近的偶数。被称为银行家圆整。
        例如：
            print(int(8.64))
            print(round(8.64))
            print(round(8.5))
            print(round(9.5))
        结果：
            8
            9
            8
            10
    说明：被转换的字符串看上去要像Python整数/浮点数，否则不能转换。
        例如：
            print(int('5'))      # 可以被转换
            print(float('5.0'))  # 可以被转换
            print(int('abc'))    # 不能转换
            print(float('abc'))  # 不能转换
            print(int('5.0'))    #不能转换
            
"""
frame = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
rgb=frame[::-1]
print(rgb)
